{"version":3,"sources":["constants/routes.ts","components/header/Header.tsx","components/screens/home-screen/HomeScreen.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["routes","memo","className","to","size","href","App","Header","exact","path","component","HomeScreen","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"iVAAaA,EACL,IADKA,EAED,YAFCA,EAGF,WAHEA,EAIJ,SCIMC,G,MAAAA,gBAAK,WAClB,OACE,yBAAKC,UAAU,cACb,yBAAKA,UAAU,yBACb,kBAAC,IAAD,CAASC,GAAIH,EAAaE,UAAU,8BAClC,kBAAC,IAAD,CAAQE,KAAK,WAEf,kBAAC,IAAD,CAASD,GAAIH,EAAiBE,UAAU,2BAAxC,YAGA,kBAAC,IAAD,CAASC,GAAIH,EAAgBE,UAAU,2BAAvC,WAGA,kBAAC,IAAD,CAASC,GAAIH,EAAcE,UAAU,2BAArC,eClBOD,G,MAAAA,gBAAK,WAClB,OACE,yBAAKC,UAAU,eACb,yBAAKA,UAAU,wBACb,wBAAIA,UAAU,mBAAd,qBACA,yBAAKA,UAAU,gBACb,qDACA,2JAEwC,uBAAGG,KAAK,gCAAR,QAFxC,YCgBKC,G,MAjBO,WACpB,OACE,kBAAC,IAAD,KACE,yBAAKJ,UAAU,OACb,kBAACK,EAAD,MACA,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAMT,EAAaU,UAAWC,IAC3C,kBAAC,IAAD,CAAOH,OAAK,EAACC,KAAMT,EAAiBU,UAAWC,IAC/C,kBAAC,IAAD,CAAOH,OAAK,EAACC,KAAMT,EAAgBU,UAAWC,IAC9C,kBAAC,IAAD,CAAOH,OAAK,EAACC,KAAMT,EAAcU,UAAWC,SCNlCC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDqI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.70ce3d9f.chunk.js","sourcesContent":["export const routes = {\n  ROOT: '/',\n  PROJECTS: '/projects',\n  CONTACT: '/contact',\n  ABOUT: '/about'\n};\n","import React, { memo } from 'react';\nimport { FaHome } from 'react-icons/fa';\nimport { NavLink } from 'react-router-dom';\n\nimport { routes } from '../../constants/routes';\n\nimport './styles.scss';\n\nexport default memo(() => {\n  return (\n    <div className=\"app-header\">\n      <div className=\"header-link-container\">\n        <NavLink to={routes.ROOT} className=\"header--nav-item home-icon\">\n          <FaHome size=\"1.5em\" />\n        </NavLink>\n        <NavLink to={routes.PROJECTS} className=\"header--nav-item padded\">\n          Projects\n        </NavLink>\n        <NavLink to={routes.CONTACT} className=\"header--nav-item padded\">\n          Contact\n        </NavLink>\n        <NavLink to={routes.ABOUT} className=\"header--nav-item padded\">\n          About\n        </NavLink>\n      </div>\n    </div>\n  );\n});\n","import React, { memo } from 'react';\nimport './styles.scss';\n\nexport default memo(() => {\n  return (\n    <div className=\"home-screen\">\n      <div className=\"home-screen__welcome\">\n        <h1 className=\"welcome-heading\">Hi, I'm Hayden...</h1>\n        <div className=\"welcome-text\">\n          <p>It's nice to meet you.</p>\n          <p>\n            I'm a front end engineer. This website is currently being updated. Until then if you'd\n            like to know more, you can message me <a href=\"mailto:hbreedlove1@gmail.com\">here</a>.\n          </p>\n        </div>\n      </div>\n    </div>\n  );\n});\n","import React from 'react';\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\n\nimport Header from './components/header/Header';\n// import Footer from './components/footer/Footer';\nimport HomeScreen from './components/screens/home-screen/HomeScreen';\nimport { routes } from './constants/routes';\nimport './App.scss';\n\nconst App: React.FC = () => {\n  return (\n    <Router>\n      <div className=\"App\">\n        <Header />\n        <Switch>\n          <Route exact path={routes.ROOT} component={HomeScreen} />\n          <Route exact path={routes.PROJECTS} component={HomeScreen} />\n          <Route exact path={routes.CONTACT} component={HomeScreen} />\n          <Route exact path={routes.ABOUT} component={HomeScreen} />\n        </Switch>\n        {/* <Footer /> */}\n      </div>\n    </Router>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}